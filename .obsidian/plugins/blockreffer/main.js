/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Blockreffer
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings/settings.ts
var DEFAULT_SETTINGS = {
  format: "!{backlink}",
  keepText: false,
  parseLinks: true,
  selectedTextAsSearch: false,
  toSearch: {
    content: true,
    path: true,
    id: true
  },
  searchLimit: 10,
  removeIdFromContent: true,
  fileName: "base"
};

// settings/settingsTab.ts
var import_obsidian = require("obsidian");
var formatRegex = /\{backlink\}/;
var ERROR_COLOR = "var(--background-modifier-error)";
var BlockrefferSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setHeading().setName("How do you want your backlink?");
    new import_obsidian.Setting(containerEl).setName("Backlink format").setDesc("How your backlink will be inserted into the document. Use {backlink} as a placeholder for the actual backlink.").addText(
      (text) => text.setPlaceholder("!{backlink}").setValue(this.plugin.settings.format).onChange(async (value) => {
        if (formatRegex.test(value)) {
          text.inputEl.style.borderColor = "";
        } else {
          text.inputEl.style.borderColor = ERROR_COLOR;
        }
        if (value === "")
          this.plugin.settings.format = DEFAULT_SETTINGS.format;
        else
          this.plugin.settings.format = value;
        await this.plugin.saveSettings();
      }).then((text2) => {
        if (!formatRegex.test(text2.getValue())) {
          text2.inputEl.style.borderColor = ERROR_COLOR;
        }
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use selected text as backlink display text").setDesc("Use selected text as the backlink alias (the bit that goes after the | symbol).").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.keepText).onChange(async (value) => {
        this.plugin.settings.keepText = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setHeading().setName("Search settings");
    new import_obsidian.Setting(containerEl).setName("Parse links").setDesc("Should markdown links be displayed as just their display text in search results?").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.parseLinks).onChange(async (value) => {
        this.plugin.settings.parseLinks = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Remove block id from block content").setDesc("Do not display the ^block-id in search results. It will still be displayed beneath the block content.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.removeIdFromContent).onChange(async (value) => {
        this.plugin.settings.removeIdFromContent = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use selected text as initial search").setDesc("If true, selected text will be used when you open the search box.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.selectedTextAsSearch).onChange(async (value) => {
        this.plugin.settings.selectedTextAsSearch = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Search limit").setDesc("The number of search results to display.").addSlider(
      (slider) => slider.setLimits(1, 50, 1).setValue(this.plugin.settings.searchLimit).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.searchLimit = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("File name in result").setDesc("Show just the file's name or the/full/path.md in search results?").addDropdown(
      (dropdown) => dropdown.addOption("base", "File name").addOption("path", "File path").setValue(this.plugin.settings.fileName).onChange(async (value) => {
        this.plugin.settings.fileName = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("What to search").setHeading();
    new import_obsidian.Setting(containerEl).setName("Block content").setDesc("Search text inside blocks.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.toSearch.content).onChange(async (value) => {
        this.plugin.settings.toSearch.content = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("File path").setDesc("Search file path and name.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.toSearch.path).onChange(async (value) => {
        this.plugin.settings.toSearch.path = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Block id").setDesc("Search ^block-ids.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.toSearch.id).onChange(async (value) => {
        this.plugin.settings.toSearch.id = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var Blockreffer = class extends import_obsidian2.Plugin {
  async onload() {
    this.loadSettings();
    this.addCommand({
      id: "open-block-search",
      name: "Search blocks with references",
      callback: async () => {
        const blocks = await this.getBlocksWithIds(
          this.app
        );
        new BlockSearchModal({
          app: this.app,
          plugin: this,
          blocks,
          action: "open"
        }).open();
      }
    });
    this.addCommand({
      id: "embed-block-search",
      name: "Embed block from existing reference",
      callback: async () => {
        const blocks = await this.getBlocksWithIds(
          this.app
        );
        new BlockSearchModal({
          app: this.app,
          plugin: this,
          blocks,
          action: "embed"
        }).open();
      }
    });
    this.addSettingTab(new BlockrefferSettingTab(this.app, this));
  }
  onunload() {
  }
  async getBlocksWithIds(app) {
    const files = app.vault.getMarkdownFiles();
    const blockRefs = [];
    for (const file of files) {
      const cache = app.metadataCache.getFileCache(file);
      if (cache && cache.blocks) {
        for (const [id, block] of Object.entries(cache.blocks)) {
          blockRefs.push({
            file: file.path,
            id,
            position: block.position
          });
        }
      }
    }
    const blockSuggestions = [];
    for (const file of app.vault.getMarkdownFiles()) {
      const cache = app.metadataCache.getFileCache(file);
      if (cache && cache.blocks) {
        const fileContent = await app.vault.cachedRead(file);
        for (const [id] of Object.entries(cache.blocks)) {
          const blockContent = fileContent.slice(
            cache.blocks[id].position.start.offset,
            cache.blocks[id].position.end.offset
          );
          blockSuggestions.push({
            file,
            id,
            content: blockContent.trim()
          });
        }
      }
    }
    return blockSuggestions;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BlockSearchModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor({
    app,
    plugin,
    blocks,
    action
  }) {
    super(app);
    this.plugin = plugin;
    this.blocks = blocks;
    this.action = action;
    this.setPlaceholder("Search for ^referenced blocks...");
    this.limit = this.plugin.settings.searchLimit;
  }
  onOpen() {
    var _a;
    super.onOpen();
    if (this.plugin.settings.selectedTextAsSearch == false)
      return;
    const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView)) == null ? void 0 : _a.editor;
    if (editor) {
      this.inputEl.value = editor.getSelection();
      this.inputEl.dispatchEvent(new Event("input"));
    }
  }
  getItems() {
    return this.blocks;
  }
  // fuzzy-searchable content
  getItemText(item) {
    let toSearch = "";
    if (this.plugin.settings.toSearch.content)
      toSearch += item.content.replace(`^${item.id}`, "").trim();
    if (this.plugin.settings.toSearch.path)
      toSearch += item.file.path;
    if (this.plugin.settings.toSearch.id)
      toSearch += item.id;
    return toSearch;
  }
  renderSuggestion({ item }, el) {
    const contentWithoutId = this.plugin.settings.removeIdFromContent ? item.content.replace(`^${item.id}`, "").trim() : item.content.trim();
    function unlinkfy(text) {
      const fragment = document.createDocumentFragment();
      let lastIndex = 0;
      const regex = /\[([^\]]+)\]\([^)]+\)/g;
      let match;
      while ((match = regex.exec(text)) !== null) {
        if (match.index > lastIndex) {
          fragment.appendChild(
            document.createTextNode(
              text.slice(lastIndex, match.index)
            )
          );
        }
        const span = document.createElement("span");
        span.className = "blockreffer-suggestion-block-link";
        span.textContent = match[1];
        fragment.appendChild(span);
        lastIndex = regex.lastIndex;
      }
      if (lastIndex < text.length) {
        fragment.appendChild(
          document.createTextNode(text.slice(lastIndex))
        );
      }
      return fragment;
    }
    const sansLink = unlinkfy(contentWithoutId);
    const withLink = document.createDocumentFragment().appendChild(document.createTextNode(contentWithoutId));
    const suggestionBlockText = this.plugin.settings.parseLinks ? sansLink : withLink;
    el.createDiv({ cls: "suggestion-content" }, (contentDiv) => {
      contentDiv.createDiv({
        cls: "blockreffer-suggestion-block-text"
      }).appendChild(suggestionBlockText);
      const from = this.plugin.settings.fileName == "base" ? item.file.basename : item.file.path;
      contentDiv.createEl("small", {
        text: `${from}#^${item.id}`,
        cls: "blockreffer-suggestion-block-file"
      });
    });
  }
  onChooseItem(item, evt) {
    var _a;
    if (this.action === "embed") {
      const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView)) == null ? void 0 : _a.editor;
      if (editor) {
        const selection = editor.getSelection();
        const link = this.plugin.settings.keepText && selection ? `[[${item.file.basename}#^${item.id}|${selection}]]` : `[[${item.file.basename}#^${item.id}]]`;
        const replacement = this.plugin.settings.format.replace("{backlink}", link);
        editor.replaceSelection(replacement);
      }
    }
    if (this.action === "open") {
      this.app.workspace.openLinkText(item.file.path, "", true);
    }
  }
};

/* nosourcemap */